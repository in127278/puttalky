package pl.poznan.put.cs.si.puttalky
 
import pl.poznan.put.cs.si.puttalky.Fakt;
import pl.poznan.put.cs.si.puttalky.Zamowienie; 
import pl.poznan.put.cs.si.puttalky.Ciasto;
import pl.poznan.put.cs.si.puttalky.Dodatek;
import pl.poznan.put.cs.si.puttalky.BazaWiedzy;
import java.util.Set;


/** Author: agalawrynowicz<br>
 * Date: 19-Dec-2016 */

rule "start"
	salience 3
	
	when
		not Fakt(nazwa=="start")
		zamowienie : Zamowienie()
	then
		zamowienie.powitanie();
		System.out.println();
		System.out.println();
		insert(new Fakt("start", "0"));
end

rule "Podaj dodatki"
	salience 2
	
	when
		not Fakt(nazwa == "dodatek")
		dodatek : Dodatek()
		parser : Parser()
		baza : BazaWiedzy()
	then
		  dodatek.setMonit("Podaj nazwê pizzy? / Jaki dodatek powinna zawierac Twoja pizza?:\n");
		  dodatek.zadajPytanie();
		  parser.przetworzOdpowiedz();
		 
		for (String slowo : parser.getSlowaKluczowe()){
			for (String uriKlasy : baza.dopasujDodatek(slowo)) { 
		        insert(new Fakt("dodatek", uriKlasy));
		    }
		    for (String uriKlasy : baza.dopasujPizze(slowo)) { 
		        insert(new Fakt("dodatek", uriKlasy));
		        break;
		        
		    } 
		}
		    		
		//@TODO	brak dopasowania
		update(dodatek);
end

rule "Podaj rodzaj ciasta"
	salience 2
	
	when
		not Fakt(nazwa == "rodzaj_ciasta")
		ciasto : Ciasto()
		parser : Parser()
	then
		  ciasto.setMonit("Podaj rodzaj ciasta:\n");
		  ciasto.zadajPytanie();
		  parser.przetworzOdpowiedz();
		 
		for (String slowo : parser.getSlowaKluczowe()){
			if (slowo.equals("cienki")){
		       insert(new Fakt("rodzaj_ciasta", "cienkie"));
			} else if (slowo.equals("gruby")) {
		       insert(new Fakt("rodzaj_ciasta", "grube"));
			}
		}
					
		//@TODO	brak dopasowania
		
		update(ciasto);
end

rule "Polecana pizza - z nazwy"
	salience 1
	
	when
		Fakt(nazwa == "dodatek") && 
		Fakt(nazwa == "rodzaj_ciasta") && 	
		not Fakt(nazwa == "pizza_propozycja") &&
        //$dodatek : Fakt( nazwa == "dodatek")
        tempdodatki: Set() from accumulate ( Fakt(nazwa == "dodatek", value:wartosc), collectSet(value))
        //dodatki2: List() from accumulate ( Fakt(nazwa == "dodatek", value:wartosc), collectList(value))
        //dodatki2: Set() from collect( Fakt(nazwa == "dodatek"))
		baza: BazaWiedzy()
		pizza: Pizza()
	then
		Set <String> dodatki=tempdodatki;
		for(String dodatek : dodatki){
			Set <String> pizzaznazwy=baza.znajdzinnepizze(dodatek);
			for(String nazwy : pizzaznazwy){
				nazwy = nazwy.replace("<","");
				nazwy = nazwy.replace(">","");
				insert(new Fakt("pizza_propozycja", nazwy));
				System.out.println("Pizze do wyboru:"+baza.wyszukajNazwy(nazwy));
			}
		}
end

rule "Polecana pizza 2"
	
	when
		Fakt(nazwa == "dodatek") && 
		Fakt(nazwa == "rodzaj_ciasta") && 	
		not Fakt(nazwa == "pizza_propozycja") &&
        //$dodatek : Fakt( nazwa == "dodatek")
        tempdodatki: Set() from accumulate ( Fakt(nazwa == "dodatek", value:wartosc), collectSet(value))
        //dodatki2: List() from accumulate ( Fakt(nazwa == "dodatek", value:wartosc), collectList(value))
        //dodatki2: Set() from collect( Fakt(nazwa == "dodatek"))
		baza: BazaWiedzy()
		pizza: Pizza()
	then
		Set <String> dodatki=tempdodatki;
			Set<String> pizze = baza.wyszukajPizzePoKilkuDodatkach(dodatki);
				            
			if (pizze.size()>1){            		
			for (String nazwaPizzy : pizze) {
				insert(new Fakt("pizza_propozycja", nazwaPizzy));
				if (!nazwaPizzy.equals("Nothing")){
						System.out.println("Polecam pizzê:"+nazwaPizzy);
						  }
						    }
						}
						else {
						System.out.print("Pizza specjalna z ");
							for(String dodatek : dodatki)
							System.out.print(" "+baza.wyszukajNazwy(dodatek));
							
							}
						System.out.println();
						insert(new Fakt("pizza_propozycja", "pizza_specjalna"));
					    
		

		
	
end


rule "zakonczenie"

	when
		not (Fakt(nazwa == "koniec")) &&
		Fakt(nazwa == "pizza_propozycja") 

		zamowienie : Zamowienie()
	then
		insert(new Fakt("koniec", "0"));
		zamowienie.pozegnanie();
end

